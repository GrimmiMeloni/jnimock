# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
GMOCK_DIR = 



# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file, or if you want to use
# a copy of Google Test at a different location.
GTEST_DIR = $(GMOCK_DIR)/gtest

# Point to the root of JNI Mock
JNIMOCK_DIR = ..

# Where to find JNI test example code
SAMPLES_DIR = ../samples


# Sepecify the g++/gcc (cross compile tool) path
CROSS_PREFIX = 

CXX = $(CROSS_PREFIX)g++
GCC = $(CROSS_PREFIX)gcc

# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include -isystem $(JNIMOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile. Remember to add new tests you
# created to the list.
TEST = jni_example_test

# All Google Test headers. Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)


JNIMOCK_HEADERS = $(JNIMOCK_DIR)/include/jnimock/*.h $(GMOCK_HEADERS)


all : jnimock.a jnimock_main.a $(TEST)

clean :
	rm -f $(TEST) gmock.a gmock_main.a jnimock.a jnimock_main.a *.o

install : $(TEST)
	adb shell mkdir -p /sdcard/unittest
	adb push $(TEST) /sdcard/unittest
	adb shell chmod 777 /sdcard/unittest/$(TEST)

run : install
	adb shell /sdcard/unittest/$(TEST)

uninstall :
	adb shell rm -r /sdcard/unittest

# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)
JNIMOCK_SRCS_ = $(JNIMOCK_DIR)/src/*.cpp

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

# Build jnimock.
jnimock.o : $(JNIMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) -I$(JNIMOCK_DIR) $(CXXFLAGS) \
			-c $(JNIMOCK_DIR)/src/jnimock.cpp

jnimock.a : jnimock.o gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

jnimock_main.a : jnimock.o gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.
jni_example_test.o : $(SAMPLES_DIR)/jni_example_test.cpp $(JNIMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SAMPLES_DIR)/jni_example_test.cpp

jni_c_example.o : $(SAMPLES_DIR)/jni_c_example.c $(JNIMOCK_HEADERS)
	$(GCC) $(CPPFLAGS) $(CXXFLAGS) -c $(SAMPLES_DIR)/jni_c_example.c

jni_cpp_example.o : $(SAMPLES_DIR)/jni_cpp_example.cpp $(JNIMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SAMPLES_DIR)/jni_cpp_example.cpp

jni_example_test : jni_example_test.o jni_c_example.o jni_cpp_example.o jnimock_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@


